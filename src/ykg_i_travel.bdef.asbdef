managed implementation in class zbp_kg_i_travel unique;
//Best practice to follow
strict ( 2 );
with draft;

//Define behaviour of root entity
define behavior for YKG_I_TRAVEL alias Travel
//DB to update
persistent table /dmo/travel_m
draft table zdmo_travel_m_d
//Lock the child entities while editing the parent
lock master
total etag LastChangedAt
//authorisation based on the role assignments(Instance by default)
authorization master ( instance )
//Locking mechanisam
etag master LastChangedAt
{
  //Operations on DB
  create;
  update;
  delete;
  field ( readonly ) TravelId;
  //A booking can only be created with Travel request
  association _Booking { create; with draft;}
  mapping for /dmo/travel_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedAt     = created_at;
      CreatedBy     = created_by;
      LastChangedAt = last_changed_at;
      LastChangedBy = last_changed_by;
    }
    draft action Activate optimized;
    draft determine action Prepare;
    draft action Discard;
    draft action Edit;
    draft action Resume;
}

define behavior for YKG_I_BOOKING alias Booking
persistent table /dmo/booking_m
draft table ZDMO_BOOKING_M_D
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  association _Travel {with draft;}
  association _BookingSupp { create; with draft;}
  mapping for /dmo/booking_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightPrice   = flight_price;
      FlightDate    = flight_date;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }
}

define behavior for YKG_I_BOOKINGSUPP alias BookingSupp
persistent table /dmo/booksuppl_m
draft table zdmobooksuppl_md
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, BookingSupplementId;
  association _Travel {with draft;}
  association _Booking {with draft;}
  mapping for /dmo/booksuppl_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }
}